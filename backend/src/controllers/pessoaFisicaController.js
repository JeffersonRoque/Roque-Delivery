const { Pessoa, PessoaFisica } = require('../models');
const { Op } = require('sequelize');

// 游댳 Criar uma nova Pessoa F칤sica
exports.create = async (req, res) => {
    try {
        console.log("Recebendo requisi칞칚o para criar Pessoa F칤sica:", req.body); // Debug

        const { nome, email, senha_hash, telefone, endereco, cpf, data_nascimento } = req.body;

        if (!nome || !email || !senha_hash || !telefone || !endereco || !cpf || !data_nascimento) {
            return res.status(400).json({ error: 'Todos os campos s칚o obrigat칩rios' });
        }

        // Verificar se j치 existe uma pessoa com mesmo e-mail, telefone ou CPF
        const pessoaExistente = await Pessoa.findOne({
            where: {
                [Op.or]: [{ email }, { telefone }]
            }
        });

        if (pessoaExistente) {
            return res.status(400).json({ error: 'E-mail ou telefone j치 cadastrado' });
        }

        const cpfExistente = await PessoaFisica.findOne({ where: { cpf } });

        if (cpfExistente) {
            return res.status(400).json({ error: 'CPF j치 cadastrado' });
        }

        // Criar Pessoa e Pessoa F칤sica
        const pessoa = await Pessoa.create({ nome, email, senha_hash, telefone, endereco, tipo_pessoa: 'fisica' });
        const pessoaFisica = await PessoaFisica.create({ id: pessoa.id, cpf, data_nascimento });

        res.status(201).json({ ...pessoa.toJSON(), ...pessoaFisica.toJSON() });
    } catch (error) {
        console.error("Erro ao criar Pessoa F칤sica:", error);
        res.status(500).json({ error: 'Erro ao criar Pessoa F칤sica', details: error.message });
    }
};

// 游댳 Buscar todas as Pessoas F칤sicas
exports.getAll = async (req, res) => {
    try {
        const pessoasFisicas = await PessoaFisica.findAll({ include: { model: Pessoa, as: 'pessoa' } });
        res.json(pessoasFisicas);
    } catch (error) {
        console.error("Erro ao buscar Pessoas F칤sicas:", error);
        res.status(500).json({ error: 'Erro ao buscar Pessoas F칤sicas' });
    }
};

// 游댳 Buscar uma Pessoa F칤sica por ID
exports.getById = async (req, res) => {
    try {
        const { id } = req.params;

        // Validar se o ID 칠 um UUID v치lido
        if (!id.match(/^[0-9a-fA-F-]{36}$/)) {
            return res.status(400).json({ error: 'ID inv치lido' });
        }

        const pessoaFisica = await PessoaFisica.findByPk(id, { include: { model: Pessoa, as: 'pessoa' } });

        if (!pessoaFisica) {
            return res.status(404).json({ error: 'Pessoa F칤sica n칚o encontrada' });
        }

        res.json(pessoaFisica);
    } catch (error) {
        console.error("Erro ao buscar Pessoa F칤sica:", error);
        res.status(500).json({ error: 'Erro ao buscar Pessoa F칤sica' });
    }
};

// 游댳 Atualizar uma Pessoa F칤sica
exports.update = async (req, res) => {
    try {
        const { id } = req.params;
        const { nome, email, senha_hash, telefone, endereco, cpf, data_nascimento } = req.body;

        // Validar se o ID 칠 um UUID v치lido
        if (!id.match(/^[0-9a-fA-F-]{36}$/)) {
            return res.status(400).json({ error: 'ID inv치lido' });
        }

        // Buscar a Pessoa F칤sica e sua Pessoa relacionada em uma 칰nica consulta
        const pessoaFisica = await PessoaFisica.findByPk(id, { include: { model: Pessoa, as: 'pessoa' } });

        if (!pessoaFisica) {
            return res.status(404).json({ error: 'Pessoa F칤sica n칚o encontrada' });
        }

        // Verificar se o novo e-mail, telefone ou CPF j치 pertence a outra pessoa
        if (email || telefone) {
            const pessoaExistente = await Pessoa.findOne({
                where: {
                    [Op.or]: [{ email }, { telefone }],
                    id: { [Op.ne]: id } // Garante que n칚o seja a pr칩pria pessoa
                }
            });

            if (pessoaExistente) {
                return res.status(400).json({ error: 'E-mail ou telefone j치 est치 em uso por outra pessoa' });
            }
        }

        if (cpf) {
            const cpfExistente = await PessoaFisica.findOne({
                where: {
                    cpf,
                    id: { [Op.ne]: id } // Garante que n칚o seja a pr칩pria pessoa
                }
            });

            if (cpfExistente) {
                return res.status(400).json({ error: 'CPF j치 est치 em uso por outra pessoa' });
            }
        }

        // Atualizar os dados
        await pessoaFisica.pessoa.update({ nome, email, senha_hash, telefone, endereco });
        await pessoaFisica.update({ cpf, data_nascimento });

        res.json({ ...pessoaFisica.pessoa.toJSON(), ...pessoaFisica.toJSON() });
    } catch (error) {
        console.error("Erro ao atualizar Pessoa F칤sica:", error);
        res.status(500).json({ error: 'Erro ao atualizar Pessoa F칤sica' });
    }
};

// 游댳 Deletar uma Pessoa F칤sica
exports.delete = async (req, res) => {
    try {
        const { id } = req.params;

        // Validar se o ID 칠 um UUID v치lido
        if (!id.match(/^[0-9a-fA-F-]{36}$/)) {
            return res.status(400).json({ error: 'ID inv치lido' });
        }

        const pessoaFisica = await PessoaFisica.findByPk(id, { include: { model: Pessoa, as: 'pessoa' } });

        if (!pessoaFisica) {
            return res.status(404).json({ error: 'Pessoa F칤sica n칚o encontrada' });
        }

        // Deleta primeiro a Pessoa associada
        await pessoaFisica.pessoa.destroy();

        res.status(204).send();
    } catch (error) {
        console.error("Erro ao deletar Pessoa F칤sica:", error);
        res.status(500).json({ error: 'Erro ao deletar Pessoa F칤sica' });
    }
};